/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

char string[]= "TESTE DO DISPLAY";		// O vetor "String" armazena a mensagem que sera exibida no display LCD
uint8_t dado = 0;													// Codigo hexadecimal usado como endereco das portas de entrada de dados do LCD
int x = 0 ;																// Tipo de Dado (Se X = 1 -> Instrucao ||  Se X = 0 -> Dado )

void inicia(void); 												// A funcao inicializa o display LCD de acordo com a rotina de inicializacao adequada
void controle(uint8_t dado,int x);				// A funcao faz uma operacao bit a bit para envio de dados para os pinos do LCD
void mensagem(char *caract);

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */

  	inicia();						// Faz a rotina de inicializacaoo do LCD
    controle(0x80,0);		// Envia o endereco onde sera mandado o Dado e o tipo de dado como instrucao
  	mensagem(string);		// Escre a mensagem armazenada no vetor "String" no display

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RW_Pin|RS_Pin|DB4_Pin|DB5_Pin
                          |EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB3_Pin|DB0_Pin|DB2_Pin|DB1_Pin
                          |DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB6_GPIO_Port, DB6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RW_Pin RS_Pin DB4_Pin DB5_Pin
                           EN_Pin */
  GPIO_InitStruct.Pin = RW_Pin|RS_Pin|DB4_Pin|DB5_Pin
                          |EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : DB3_Pin DB0_Pin DB2_Pin DB1_Pin
                           DB7_Pin */
  GPIO_InitStruct.Pin = DB3_Pin|DB0_Pin|DB2_Pin|DB1_Pin
                          |DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : DB6_Pin */
  GPIO_InitStruct.Pin = DB6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DB6_GPIO_Port, &GPIO_InitStruct);

  /**/
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB6);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */


void inicia(void)	// Rotina de inicializacao do display LCD
{
		controle (0x30,0);
		controle (0x30,0);
		controle (0x30,0);
		controle (0x38,0);
		controle (0x0f,0);
		controle (0x06,0);
		controle (0x01,0);

}
void controle(uint8_t dado,int x)		// Faz o controle das entradas bit a bit
{
	 	if(x==1)
		{
			HAL_GPIO_WritePin(RS_GPIO_Port,RS_Pin,GPIO_PIN_SET);   // Configura como DADO
		}
		if(x==0)
		{
			HAL_GPIO_WritePin(RS_GPIO_Port,RS_Pin,GPIO_PIN_RESET); // Configura como INSTRU��O
		}
		HAL_GPIO_WritePin(RW_GPIO_Port,RW_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(EN_GPIO_Port,EN_Pin,GPIO_PIN_RESET);

		HAL_GPIO_WritePin(DB0_GPIO_Port,DB0_Pin,((dado & 0x01) != 0 ? GPIO_PIN_SET:GPIO_PIN_RESET));
		HAL_GPIO_WritePin(DB1_GPIO_Port,DB1_Pin,((dado & 0x02) != 0 ? GPIO_PIN_SET:GPIO_PIN_RESET));
		HAL_GPIO_WritePin(DB2_GPIO_Port,DB2_Pin,((dado & 0x04) != 0 ? GPIO_PIN_SET:GPIO_PIN_RESET));
		HAL_GPIO_WritePin(DB3_GPIO_Port,DB3_Pin,((dado & 0x08) != 0 ? GPIO_PIN_SET:GPIO_PIN_RESET));
		HAL_GPIO_WritePin(DB4_GPIO_Port,DB4_Pin,((dado & 0x10) != 0 ? GPIO_PIN_SET:GPIO_PIN_RESET));
		HAL_GPIO_WritePin(DB5_GPIO_Port,DB5_Pin,((dado & 0x20) != 0 ? GPIO_PIN_SET:GPIO_PIN_RESET));
		HAL_GPIO_WritePin(DB6_GPIO_Port,DB6_Pin,((dado & 0x40) != 0 ? GPIO_PIN_SET:GPIO_PIN_RESET));
		HAL_GPIO_WritePin(DB7_GPIO_Port,DB7_Pin,((dado & 0x80) != 0 ? GPIO_PIN_SET:GPIO_PIN_RESET));

		HAL_Delay(1);
		HAL_GPIO_WritePin(EN_GPIO_Port,EN_Pin,GPIO_PIN_SET);
		HAL_Delay(1);
		HAL_GPIO_WritePin(EN_GPIO_Port,EN_Pin,GPIO_PIN_RESET);

}

void mensagem(char *caract)				// Escreve a menssagem
{
				while (*caract!='\0')			// O laco so termina quando a string encontra caractere nulo('\0')
				{
						controle(*caract,1);  // O ponteiro aponta para o caractere especifico dentro do vetor string
						caract++;
				}
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
